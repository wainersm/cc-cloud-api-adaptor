# (C) Copyright Confidential Containers Contributors 2022.
# SPDX-License-Identifier: Apache-2.0
#
---
name: e2e tests

on:
  pull_request:
    types:
      # Adding 'labeled' to the list of activity types that trigger this event
      # (default: opened, synchronize, reopened) so that we can run this
      # workflow when the 'ok-to-test' label is added.
      # Reference: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target
      - opened
      - synchronize
      - reopened
      - labeled

env:
  # cloud-api-adaptor image registry
  E2E_IMG_REGISTRY: ghcr.io/${{ github.repository_owner }}
  # cloud-api-adaptor: image release tag
  E2E_IMG_RELEASE_TAG: ci-pr${{ github.event.number  }}
  # cloud-api-adaptor image dev tag
  E2E_IMG_DEV_TAG: ci-pr${{ github.event.number  }}-dev

jobs:
  podvm:
    name: podvm
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test_e2e_libvirt') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        os:
          - centos
          - ubuntu
        provider:
          - generic
          #- vsphere
        arch:
          - amd64
          #- s390x
        #exclude:
          #- os: centos
          #  arch: s390x
          #- provider: vsphere
          #  arch: s390x
          #- provider: vsphere
          #  os: centos
    env:
      registry: quay.io/confidential-containers
      podvm_image: podvm-${{ matrix.provider }}-${{ matrix.os }}-${{ matrix.arch }}
      qcow2: podvm-${{ matrix.provider }}-${{ matrix.os }}-${{ matrix.arch }}.qcow2
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Extract the podvm qcow2
        run: ./hack/download-image.sh ${{ env.registry }}/${{ env.podvm_image }} . -o ${{ env.qcow2 }}
        working-directory: podvm

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.qcow2 }}
          path: podvm/${{ env.qcow2 }}
          retention-days: 1

  # Build and push the cloud-api-adaptor image
  #
  # By using a reusable `workflow_call` workflow we are hitting two
  # GHA limitations here:
  #
  # - Cannot access the `env` context from the `with` so that it cannot
  #   reuse the E2E_IMG_* environment variables set at this workflow level.
  # - Cannot call a reusable workflow from a job's step, so the we cannot
  #   merge the `image` and `prep_env` into a single one (unless we create
  #   another reusable workflow and, well, likely hit another limitation...).
  #
  # Reference: https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations
  #
  image:
    uses: ./.github/workflows/caa_build_and_push.yaml
    with:
      registry: ghcr.io/${{ github.repository_owner }}
      dev_tags: ci-pr${{ github.event.number  }}-dev
      release_tags: ci-pr${{ github.event.number  }}
    secrets: inherit

  prep_install:
    needs: [image]
    runs-on: ubuntu-latest
    env:
      # IMPORTANT: If you are enabling e2e tests for a given provider,
      # then please update this list (space-separated list, e.g., "aws libvirt").
      PROVIDERS: "libvirt"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install kustomize
        run: |
          command -v kustomize >/dev/null || \
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | \
            bash -s /usr/local/bin

      - name: Update kustomization configuration
        run: |
          set -e
          providers=(${{ env.PROVIDERS }})
          # If there aren't providers then something is wrong
          [[ ${#providers[@]} -gt 0 ]] || exit 1

          for provider in ${providers[@]}; do
            img="${E2E_IMG_REGISTRY}/cloud-api-adaptor"
            tag="${E2E_IMG_RELEASE_TAG}"
            [[ "$provider" = "libvirt" ]] && tag="${E2E_IMG_DEV_TAG}"
            echo "::group::Update ${provider}"
            pushd "install/overlays/${provider}"
            kustomize edit set image "cloud-api-adaptor=${img}:${tag}"
            # Print for debugging
            cat kustomization.yaml
            echo "::endgroup::"
            # Validate the file to avoid it silently testing with a wrong image
            grep "newName: ${img}" kustomization.yaml
            grep "newTag: ${tag}" kustomization.yaml
            popd
          done
      # Upload the install directory so that it can be "mounted" on downstream
      # jobs.
      - uses: actions/upload-artifact@v3
        with:
          name: install_directory
          path: install/
          retention-days: 1

  # Run libvirt e2e tests if pull request labeled 'test_e2e_libvirt'
  e2e_libvirt:
    name: libvirt
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test_e2e_libvirt') }}
    needs: [podvm, image, prep_install]
    uses: ./.github/workflows/e2e_libvirt_on_pull.yaml
    with:
      qcow2_artifact: podvm-generic-ubuntu-amd64.qcow2
      install_directory_artifact: install_directory
    secrets: inherit